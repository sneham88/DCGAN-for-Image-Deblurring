# -*- coding: utf-8 -*-
"""rl deconvolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/101b9yoOyTDqLqf2iC12NBmKmY-Uc-T_c

Import Libraries
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.nn.functional as F

import tensorflow as tf
from tensorflow.keras import layers
from keras.callbacks import TensorBoard


from glob import glob
import os

"""### Defining the RL Algorithm"""

# Define PSF as a Gaussian Kernel
def gaussian_psf(kernel_size, sigma):
    ax = torch.arange(-kernel_size // 2 + 1., kernel_size // 2 + 1.)
    xx, yy = torch.meshgrid([ax, ax], indexing="ij")
    kernel = torch.exp(-0.5 * (xx**2 + yy**2) / sigma**2)
    kernel /= kernel.sum()
    return kernel

def richardson_lucy_rgb_torch(observed, psf, num_iterations=50, clip=True):

    assert observed.ndim == 3 and observed.shape[0] == 3, "Observed image should have shape (3, H, W)"
    assert psf.ndim == 2, "PSF should be a 2D tensor"

    estimated = observed.clone()

    # Flip the PSF for convolution
    psf_flip = torch.flip(psf, dims=(-2, -1))

    # Reshape PSF for conv2d
    psf = psf.unsqueeze(0).unsqueeze(0)
    psf_flip = psf_flip.unsqueeze(0).unsqueeze(0)

    for _ in range(num_iterations):
        for c in range(3):  # For each color channel (R, G, B)
            channel = estimated[c:c+1]  # (1, H, W)

            # Convolve with PSF
            convolved = F.conv2d(channel.unsqueeze(0), psf, padding='same').squeeze(0)

            # Avoid divide by zero
            convolved = torch.clamp(convolved, min=1e-8)

            # Ratio: (observed / (PSF * estimate))
            ratio = observed[c:c+1] / convolved

            # Backproject using flipped PSF
            backprojected = F.conv2d(ratio.unsqueeze(0), psf_flip, padding='same').squeeze(0)

            # Update estimated image
            estimated[c] *= backprojected.squeeze(0)

        if clip:
            estimated = torch.clamp(estimated, 0, 1)

    return estimated

"""### Perform RL Deconvolution on Training Data"""

def load_image_as_tensor(image_path):
    image = Image.open(image_path).convert('RGB')
    image_np = np.asarray(image) / 255.0  # Normalize to [0, 1]
    image_tensor = torch.tensor(image_np, dtype=torch.float32).permute(2, 0, 1)  # (H, W, 3) -> (3, H, W)
    return image_tensor, image

def save_tensor_as_image(tensor, output_path):
    tensor = torch.clamp(tensor, 0, 1)  # Ensure values are valid for images
    image_np = tensor.permute(1, 2, 0).cpu().numpy()  # (3, H, W) -> (H, W, 3)
    image_np = (image_np * 255).astype(np.uint8)  # Convert to uint8
    Image.fromarray(image_np).save(output_path)

# Define Input & Output Paths for Preprocessed Images
input_folder = "/content/drive/My Drive/FYP 2025/gaussian blurred images kernel setting 2"
output_folder = "/content/drive/My Drive/FYP 2025/richardson-lucy deconvolved images"
os.makedirs(output_folder, exist_ok=True)

# Load PSF
device = 'cuda' if torch.cuda.is_available() else 'cpu'
psf = gaussian_psf(100, 10).to(device)

# --- Apply RL Deconvolution to Each Image ---
for filename in os.listdir(input_folder):
    if filename.endswith(".tif") or filename.endswith(".png"):
        input_path = os.path.join(input_folder, filename)

        # Convert all outputs to .tif
        base_filename = os.path.splitext(filename)[0]
        output_path = os.path.join(output_folder, base_filename + '.tif')

        print(f"Processing {filename}...")

        observed, _ = load_image_as_tensor(input_path)
        observed = observed.to(device)

        restored = richardson_lucy_rgb_torch(observed, psf, num_iterations=10)

        # Save Output Image as .tif
        save_tensor_as_image(restored, output_path)
        print(f"Saved RL-preprocessed image: {output_path}")

# Cleanup: Remove any .png files in the output folder (if previously created)
for file in os.listdir(output_folder):
    if file.endswith(".png"):
        png_path = os.path.join(output_folder, file)
        os.remove(png_path)
        print(f"Removed duplicate PNG: {png_path}")

print("Preprocessing complete. RL-processed images saved as .tif for DCGAN training.")

"""#### END"""